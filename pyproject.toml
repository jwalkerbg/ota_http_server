[tool.poetry]
name = "ota_http_server"
version = "2.0.1"
description = "OTA http(s) server"
license = "MIT"
authors = ["Ivan Cenov <i_cenov@botevgrad.com>"]
repository = "https://github.com/jwalkerbg/ota_http_server.git"
readme = "README.md"
packages = [{include = "ota_http_server", from = "src"}]
# Additional files that should be added to sdist and wheel distributions.
include = [
    "pyproject.toml",
    "build.py",
    "README.md",
    "src/ota_http_server/extensions/*"
]  # Compiled extensions

# Runtime dependencies
[tool.poetry.dependencies]
python = ">=3.12"
cython = ">=3.0"
setuptools = ">=68.0.0"
tomli = { version = "*", markers = "python_version < '3.11'" }
jsonschema = ">= 4.25"
types-jsonschema = ">= 4.25"
rfc3986 = ">= 2.0.0"
Flask = ">=3.1.2"
packaging = ">=25.0"
PyJWT = ">=2.10.1"
Werkzeug = ">=3.1.3"

# Development dependencies
[tool.poetry.group.dev.dependencies]
mypy = "^1.5.1"  # Static type checker
pathlib = ">=1.0"
pylint = "^4.0"

# Test dependencies
[tool.poetry.group.test.dependencies]
pytest = ">=8.4.0"
pytest-cov = ">=7.0.0"
pytest-mock = ">=3.0.0"

[tool.mypy]
# --- General settings ---
python_version = "3.13"
files = ["src"]
namespace_packages = true
ignore_missing_imports = false
# --- Error reporting & strictness ---
warn_return_any = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unreachable = true
# --- Enforce type discipline ---
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
disallow_any_generics = false
no_implicit_optional = true
strict_equality = true
# --- Optional handling ---
strict_optional = true
# --- Misc behaviour ---
pretty = true
show_error_codes = true
show_column_numbers = true
follow_imports = "silent"
exclude = [
    "tests/.*",
    "build/.*",
    "dist/.*",
    "venv/.*",
    ".venv/.*",
    "www/*"
]
# --- Plugin support (Flask, Pydantic, etc.) ---
plugins = []
# --- Incremental mode cache ---
cache_dir = ".mypy_cache"

# CLI entry points
[tool.poetry.scripts]
ota_http_server = "ota_http_server.cli.app:main"

# Definitions, specific for this project.
[tool.build.config]
# path where Cython and C extensions live, each extension in a separate directory
extensions_path = "src/ota_http_server/extensions"
# directories where C extensions can search for C header files
include_dirs = ["src/ota_http_server/include", "src/include"]
# This specifies the name of the libraries to link against, without the lib prefix or file extension.
# Example: If you have a shared library named `libmylib.so` (Linux) or `mylib.dll` (Windows), you would specify libraries=["mylib"].
libraries = []
# activate logging in build.py
build_log = true

[build-system]
requires = ["poetry-core", "setuptools", "Cython"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.build]
generate-setup-file = true
script = 'build.py'

[tool.pytest.ini_options]
# ---------------------------------------------------------------------------
# üß© Test discovery
# ---------------------------------------------------------------------------
# Directories where pytest will look for tests
testpaths = [
    "tests"
]

# Add your source folder to the Python path (so imports like `from core import ...` work)
pythonpath = [
    "src"
]

# File patterns pytest should treat as tests
python_files = [
    "test_*.py",
    "*_test.py"
]

# Class and function name patterns to match tests
python_classes = [
    "Test*"
]
python_functions = [
    "test_*"
]

# ---------------------------------------------------------------------------
# ‚öôÔ∏è General behavior
# ---------------------------------------------------------------------------
# Stop after first failure (optional)
# addopts = "-x"

# Verbose output + coverage + show summary of skipped/xfailed tests
addopts = [
    "-v",                        # verbose output
    "--tb=short",                # shorter tracebacks
    "--strict-markers",          # enforce marker names
    "--disable-warnings",        # hide warnings (optional)
    "--cov=src",                 # measure code coverage on your source folder
    "--cov-report=term-missing", # show lines not covered
    "--cov-branch",              # enable branch coverage (if supported)
    "--durations=10",            # show 10 slowest tests
]

# ---------------------------------------------------------------------------
# üß™ Markers (custom test categories)
# ---------------------------------------------------------------------------
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: integration-level test",
    "unit: unit test",
    "network: requires network access",
    "xfail: expected failure"
]

# ---------------------------------------------------------------------------
# üßØ Logging & Warnings
# ---------------------------------------------------------------------------
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)s] %(message)s"
log_date_format = "%H:%M:%S"

# Ignore or handle specific warnings (optional)
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

# ---------------------------------------------------------------------------
# üß± Coverage plugin configuration
# ---------------------------------------------------------------------------
[tool.coverage.run]
branch = true
source = ["src"]
omit = [
    "*/__init__.py",
    "*/tests/*",
    "build.py",
    "src/ota_http_server/extensions/*"
]

[tool.coverage.report]
show_missing = true
skip_covered = false
precision = 1

[tool.pylint]

[tool.pylint.messages_control]
# Disable trivial warnings that are often noisy in small projects or tests
disable = [
    "C0114",  # missing-module-docstring
    "C0115",  # missing-class-docstring
    "C0116",  # missing-function-docstring
    "R0903",  # too-few-public-methods (common for simple classes)
]

[tool.pylint.basic]
# Naming conventions
variable-naming-style = "snake_case"
function-naming-style = "snake_case"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
attr-naming-style = "snake_case"

[tool.pylint.format]
# Max line length
max-line-length = 200
# Allow hanging indents for readability
indent-string = "    "

[tool.pylint.typecheck]
# Ignore missing type info from third-party packages
ignored-modules = ["pytest"]
ignored-classes = ["ABC"]

[tool.pylint.master]
# Files/directories to ignore
ignore = ["tests", "build", "venv", ".venv", "dist", "src/ota_http_server/extensions", "www"]
jobs = 0  # auto-detect CPU cores for parallel linting

[tool.pylint.reports]
# Disable the full report summary at the end (CI-friendly)
reports = false

[tool.pylint.similarities]
# Minimum lines for duplicate code detection
min-similarity-lines = 4

[tool.pylint.design]
# Allow up to 15 arguments per function (increase if necessary)
max-args = 15
# Allow up to 10 attributes per class
max-attributes = 10

[tool.pylint.logging]
# Use recommended logging format
logging-format-style = "old"
logging-modules = ["logging"]
[tool.pylint.imports]

[tool.pylint.miscellaneous]
# Standard library modules for import-order recognition
known-standard-library = [
    "abc",
    "os",
    "sys",
    "re",
    "json",
    "logging",
    "pathlib",
    "unittest",
    "functools",
    "typing",
    "http",
]
